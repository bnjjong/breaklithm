package week_2.mgpark;

import java.util.ArrayList;
import java.util.List;
import week_2.mgpark.util.Argument;
import week_2.mgpark.util.ListUtils;

public class MergeSort {

  public static void main(String[] args) {
    execute(new String[]{
        "6",
        "5 2 6 1 3 8"
    });
    execute(new String[]{
        "100",
        "70 96 82 4 59 37 18 56 77 65 52 80 19 1 30 27 28 64 58 9 91 45 94 10 17 87 66 57 90 24 26 13 14 78 42 67 60 69 85 83 95 16 55 48 84 15 62 53 20 2 29 99 21 40 88 100 23 3 51 41 92 44 49 93 38 75 31 35 8 98 33 74 6 50 39 12 73 43 71 79 63 72 34 25 81 36 11 46 32 97 76 89 47 7 22 61 68 86 54 5"
    });
    execute(new String[]{
        "694",
        "96 5874 9932 5955 7276 9036 2738 7489 9908 5463 9617 5533 3923 4717 9837 1365 8154 1634 4501 594 1530 8770 9097 2609 1743 2930 5505 4566 4427 1779 1833 9217 1420 6101 4657 4749 455 4602 7561 8459 368 4010 3854 5175 364 5219 6439 9651 3993 10000 4504 3387 8647 5153 6358 3673 7867 7037 8464 6819 3068 8267 7082 7799 2723 4744 918 8656 2099 9492 7087 7498 4366 6802 1483 6969 9431 4351 6647 9953 2703 4226 9405 8875 3576 6141 5787 2967 3902 9069 127 6120 1830 4131 7084 8189 378 3309 1332 6274 5783 1734 2052 2217 8995 9621 71 8530 1708 4571 2493 5192 7500 7119 9586 2003 2902 2599 5579 3097 2406 664 1477 5524 6642 2786 3263 5702 3333 2832 5143 7897 3662 3671 3596 2789 8227 2927 6971 9843 3877 5395 6816 4633 7451 4907 2129 5100 3985 2722 1591 6422 218 4597 5573 447 2622 6105 8775 4730 9889 2952 6077 2533 9450 4701 4923 5879 4789 8234 2592 8075 490 8401 3271 145 5352 4517 1100 7806 5441 6828 2693 6791 7894 9135 3634 9058 6181 448 388 9819 5700 7028 8630 2704 7285 4326 7279 3997 9464 7927 4503 6265 9947 8650 2429 3981 7032 8598 1252 2916 1126 6752 1096 7891 9368 8956 9535 7545 3082 3791 8936 475 1347 1401 3979 547 1391 1042 1781 6948 4014 82 5534 1560 7268 9028 1183 5695 1503 8362 7978 7730 5878 1087 61 897 6799 2402 9210 8515 2363 4540 6009 5104 4672 2711 2520 6833 5828 6702 3815 5493 1822 3121 3916 3774 4019 9970 6918 6339 9221 7427 5496 7296 2383 3650 199 5036 6160 256 3894 3919 4821 8300 8626 3448 4646 1963 7759 9987 4394 7965 9416 8336 7384 4514 5343 9605 8804 5770 1321 4277 6433 2053 9 4173 3818 8273 3295 3813 1672 7539 1982 6723 4452 1694 3571 6845 5189 3536 2579 760 1132 5128 7880 6240 1978 6684 4406 8274 7008 8465 7582 6935 9726 8544 4945 3328 882 5302 2522 4256 5560 400 2116 6235 5270 7913 2077 8497 4614 4843 6722 6084 7850 468 8712 1884 2249 5409 7062 4024 5005 933 5718 2870 6122 3821 6348 347 1994 3415 947 5515 9281 9214 5112 6369 5363 6509 3603 3910 2397 1366 6540 5898 3892 2812 3471 2140 4917 6419 5349 2963 7426 8524 7212 9892 1607 9430 2772 2909 3188 8236 2175 3965 5378 9200 8659 3975 6477 2235 5757 9111 7940 8027 1728 6674 8933 5921 4660 2890 6031 6247 4041 6980 2636 1528 6174 5098 8365 9960 4062 3424 8716 3249 5152 9963 935 6870 7494 1892 2234 5539 6655 809 2564 5567 217 5074 8014 1652 8163 5263 912 1000 2010 4941 2145 4910 4357 519 2729 2653 3838 658 7706 6985 2676 4726 6411 2920 1299 1045 5331 6012 1436 7627 8490 4724 4920 797 4916 8008 2624 5054 1742 7558 7411 8127 8385 6454 7238 7742 8442 4341 869 8320 5336 5691 9640 8950 6214 7592 8129 800 2072 1637 8695 4530 6507 6336 9683 4591 5301 875 7184 8120 7954 459 5118 677 6305 951 2018 6673 4539 2875 6516 599 5933 7774 1244 2277 3048 4711 412 2359 3483 2791 2062 6650 9672 3321 3028 2047 5858 2043 6934 4305 4932 9646 9385 2702 4812 8892 8421 9222 3504 5233 9366 4984 8115 7920 6773 6737 6865 3948 671 4511 7951 337 3366 6786 2957 3798 2332 6891 2587 2811 6058 9204 7998 5991 434 647 138 4930 8533 7851 4181 3632 7727 9361 5406 5795 9781 3929 5581 5703 7818 946 7751 5096 5864 1502 1224 4796 320 1774 4225 119 8326 7328 5970 3875 5457 1500 7389 5836 8426 1278 3784 1860 8605 6458 7581 7857 2623 1120 4688 4577 1731 2447 8834 5908 7638 8842 264 669 3404 6334 6837 7095 7580 365 688 7193 9434 4224 6638 1072 8263 3360 1107 2771 5231 2132 8461 6172 7603 2453 285 1965 7262 2678 6005 5253 6357 8022 648 6693 7286 4138 4360 9532 841 1598 1426 7868 4210 8372 4473 3419 5938 4475 2720 1670 562 2922 4012 9482"
    });
  }

  private static void execute(String[] args) {
    Argument argument = Argument.of(args);
    List<Integer> copiedList = ListUtils.copyAsNew(argument.arr());
    mergeSort(copiedList, 0, argument.arrSize() - 1);
    ListUtils.print(copiedList);
  }

  private static void mergeSort(List<Integer> arr, int start, int end) {
    if (start < end) {
      int mid = (start + end) / 2;
      mergeSort(arr, start, mid);
      mergeSort(arr, mid + 1, end);
      merge(arr, start, mid, end);
    }
  }

  private static void merge(List<Integer> arr, int start, int mid, int end) {
    int i = start;
    int j = mid + 1;
    int k = start;

    List<Integer> temp = new ArrayList<>();
    for (int l = 0; l <= end; l++) {
      temp.add(null);
    }

    // i, j를 비교후 작은거 넣고 증가
    while (i <= mid && j <= end) {
      if (arr.get(i) <= arr.get(j)) {
        temp.set(k++, arr.get(i++));
      } else {
        temp.set(k++, arr.get(j++));
      }
    }

    // 남은거 다 털기
    while (i <= mid) {
      temp.set(k++, arr.get(i++));
    }

    // 남은거 다 털기
    while (j <= end) {
      temp.set(k++, arr.get(j++));
    }

    for (int l = start; l < end + 1; l++) {
      arr.set(l, temp.get(l));
    }
  }
}
